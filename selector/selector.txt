selector(选择器)管理多个通道(Channel),它是个抽象类

Selector open()：得到一个选择器对象
select(Long timeout)：监控所有注册的通道，当其中有io操作可以进行时，将对应的SelectionKey 加入到内部集合中并返回，
		  参数用来设置超时时间 
		  它是阻塞的，直到它注册的channel里面，至少有一个事件发生
        ->selectionKey：一但监听到那个Channel里有事件发生了，会把selectionKey拿到，
		  可以便利我得到的selectionkey,通过selectionKey去反向到channel，
		  也就是说selectionKey与channel相关联的

selectedKeys()：是从集合中得到所有的selectionKey，而select是在监听时得到
	         它是只要是注册了的channel 就返回selectionKey

selector.select()：阻塞
selector.select(100)：阻塞100毫秒
selector.wakeup()：唤醒selector (select是阻塞的)
selector.selectNow：立马返回


selectionKey 事件：
OP_READ：读事件
OP_WRITE：写事件
OP_CONNECT：连接成立
OP_ACCEPT：有新的连接来了，客户端来连接

ServerSocketChannel相关方法：监听新的客户端Socket连接
ServerSocketChannel open()：得到一个serversocketChannel通道
ServerSocketChannel bind()：设置服务器端口号
ServerSocketChannel configureBlocking：设置阻塞或非阻塞模式
SocketChannel accpet()：接受一个连接，返回代表这个连接的通道对象
SelectionKey register：注册一个选择器并设置监听事件

SocketChannel相关方法：具体负责进行读写操作
SocketChannel open()：得到一个SocketChannel通道
SocketChannel configureBlocking：设置阻塞或非阻塞模式
connect(SocketAddress remote)：连接服务器
finishConnect()：如果上面的方法连接失败，接下来就要通过该方法完成连接操作
write：往通道里写数据
read：从通道里读数据
selectionKey register()：注册一个选择器并设置监听事件，最后一个参数可以设置共享数据
close：关闭通道